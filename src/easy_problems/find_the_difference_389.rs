// Solution has
// Time complexity: O(n)
// Space complexity: O(n)
//
// You are given two strings s and t.
//
// String t is generated by random shuffling string s and then add one more letter at a random position.
//
// Return the letter that was added to t.
struct Solution;
impl Solution {
    pub fn find_the_difference(s: String, t: String) -> char {
        let mut char_array: [usize; 26] = [0; 26];

        for c in t.chars() {
            char_array[c as usize - 97] += 1;
        }
        for c in s.chars() {
            char_array[c as usize - 97] += 1;
        }
        for (i, c) in char_array.iter().enumerate() {
            if *c == 1 {
                return char::from_u32((i + 97) as u32).unwrap();
            }
        }
        '0'
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn diff_e() {
        assert_eq!(
            Solution::find_the_difference("abcd".to_string(), "abcde".to_string()),
            'e'
        );
    }
    #[test]
    fn diff_e_again() {
        assert_eq!(
            Solution::find_the_difference("abcd".to_string(), "abdce".to_string()),
            'e'
        );
    }
}
